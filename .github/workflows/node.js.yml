name: Node.js CI

on:
  push:
    branches: ['master']

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present

      - name: Format code
        run: npm run format

      - name: Lint code
        run: npm run lint

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set short git commit SHA
        id: commit
        uses: prompt/actions-commit-hash@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.commit.outputs.short }}
        run: |
          echo ECR_REGISTRY: $ECR_REGISTRY
          echo ECR_REPOSITORY: $ECR_REPOSITORY
          echo IMAGE_TAG: $IMAGE_TAG

          docker buildx build --platform linux/amd64 --provenance=false -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          echo URI_COMPLETE = $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Example ENV
        run: |
          echo IMAGE_URI: $IMAGE_URI

      - name: Deploy to AWS Lambda
        env:
          FUNCTION_NAME: api-lamba-production-api-lambda
          IMAGE_URI: ${{ env.IMAGE_URI }}
        run: |
          echo FUNCTION_NAME: $FUNCTION_NAME
          echo IMAGE_URI: $IMAGE_URI
          aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $IMAGE_URI
